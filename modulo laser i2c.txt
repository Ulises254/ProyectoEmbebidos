/////////////////////modulo laser i2c///////////////////////
////////////////////(PB3 SDA) (PB2 SCL)

#include<stdint.h>
#include<stdbool.h>
#include "inc/tm4c1294ncpdt.h"


#define I2C_MCS_ACK 0x00000008 //Transmmitter Acknowledge Enable
#define I2C_MCS_DATACK 0x00000008 // Data Acknowledge Enable
#define I2C_MCS_ADRACK 0x00000004 // Acknowledge Address
#define I2C_MCS_STOP 0x00000004 // Generate STOP
#define I2C_MCS_START 0x00000002 // Generate START
#define I2C_MCS_ERROR 0x00000002 // Error
#define I2C_MCS_RUN 0x00000001 // I2C Master Enable

///** registros del sensor ***

#define UMBRAL_H 0x001E //Distacia a comparar
#define UMBRAL_L 0x0028 //Distancia a comparar


#define AdreVL5310  0x29 //Dirección del modulo
#define AdreSTAR  0x00   //modo de funcion continuo o one shot
#define AdreITER  0x0A   //modo de interrupcion umbral alto o bajo
#define AdreCLEAR  0x0B  //Limpia interrupcion
#define AdreESTANDAR  0x88  //I2C estandar

#define AdreFLANCO  0x84 //Interrupcion por flanco alto o bajo

#define AdreUMH_H  0x0C  //Colocar el umbral alto
#define AdreUMH_L  0x0D

#define AdreUML_H  0x0E  //Colocar el umbral bajo
#define AdreUML_L  0x0F

#define AdreREAD_H  0x1E //Leer dato parte alta
#define AdreREAD_L  0x1F //Leer dato parte baja



int contador = 0;
int i = 0;
uint16_t distancia = 0;
uint8_t valor_h = 0;
uint8_t valor_l = 0;
uint8_t valor = 0;
uint8_t  stop = 0;
uint8_t  interr = 0;
int error;

void I2C_Write(uint8_t device_address, uint8_t register_address, uint8_t data);
int I2C_Read(uint8_t device_address, uint8_t register_address);
void I2C_Umbral_L(uint16_t distancia);
void I2C_Umbral_H(uint16_t distancia);
void GPIO_Init(void);
void I2C_Init(void);
void GPIOPortA_Handler(void);
void vl53l0x_Init(void);
int esperar(void);


//*** PROGRAMA PRINCIPAL ****

int main(){

    I2C_Init(); //Funcion inicializa I2C0

    while(I2C0_MCS_R&0x00000001){}; // espera que el I2C esté listo

    GPIO_Init(); //funcion inicializar gpio H3

    vl53l0x_Init(); //Funcion inicializar registros del modulo

       while(1)
       {

       }




}

//****** FUNCION CONFIG PORT_A *****

void GPIO_Init(void)
{
  SYSCTL_RCGCGPIO_R |= 0x001;      //reloj puerto A
  while((SYSCTL_PRGPIO_R&0x001) == 0){};
  GPIO_PORTA_AHB_DIR_R  &= ~0x01;   //entrada A0
  GPIO_PORTA_AHB_DEN_R  |= 0x01;    //digital A0
  GPIO_PORTA_AHB_IS_R   &= ~0x01;  //sensible por flanco

  GPIO_PORTA_AHB_IBE_R  &= ~0x01;  //no es sensible a dos flancos
  GPIO_PORTA_AHB_IEV_R  |= 0x01;   //detecta eventos de flanco de subida
  GPIO_PORTA_AHB_ICR_R     = 0x01;     //limpia la bandera
  GPIO_PORTA_AHB_IM_R  |= 0x01;    //Se desenmascara la interrupcion

  NVIC_EN0_R= 1<<0;              //habilitar interrupción

}

//**** FUNCION CONFIG I2C *******

void I2C_Init(void)
{
    // Configuración de pines y módulo I2C, similar a la que ya tienes en tu código
       SYSCTL_RCGCGPIO_R |= 0x02;   // Habilitar puerto B
       SYSCTL_RCGCI2C_R |= 0x01;    // Habilitar I2C módulo 0
       while((SYSCTL_PRGPIO_R&0x0002) == 0){};
       while(I2C0_MCS_R&0x00000001){};


       GPIO_PORTB_AHB_AFSEL_R |= 0x0C;  // Activar funciones alternativas para PB2 y PB3
       GPIO_PORTB_AHB_ODR_R  |= 0x08;    // Activar Open-Drain para PB3 (SDA)
       GPIO_PORTB_AHB_DEN_R  |= 0x0C;    // Habilitar el pin digital para PB2 y PB3
       GPIO_PORTB_AHB_PCTL_R  = 0x00002200;

       I2C0_MCR_R = 0x10;           // Inicializar el maestro I2C
       I2C0_MTPR_R = 0x07;          // Configuración de velocidad de I2C para ~100kHz

}

//*** Configuracion del sensor ****

void vl53l0x_Init(void)
{
    I2C_Write(AdreVL5310, AdreESTANDAR, 0x00); ///I2C estandar
    I2C_Write(AdreVL5310, AdreCLEAR, 0x01); ///Limpiar interrup
    I2C_Write(AdreVL5310, AdreITER, 0x02); ///Habilitar interrupcion
    I2C_Write(AdreVL5310, AdreFLANCO, 0x01); ///Flanco de bajada o alto
    I2C_Write(AdreVL5310, AdreSTAR, 0x02); ///Tipo de disparo

    I2C_Umbral_L(UMBRAL_L); //Establecer la distancia
    I2C_Umbral_H(UMBRAL_H); //Establecer la distancia
}

//*** ESCRITURA I2C ****

void I2C_Write(uint8_t device_address, uint8_t register_address, uint8_t data)
{

    while(I2C0_MCS_R&0x00000001){};

    I2C0_MSA_R = (device_address << 1) & 0xFE;  // Dirección del esclavo
    I2C0_MDR_R = register_address;  // Registro al que escribir
    I2C0_MCS_R = (I2C_MCS_START | I2C_MCS_RUN);  // Inicia la transmisión
    for(i=0;i<150;i++){}
    esperar();

    I2C0_MDR_R = data;  // Enviar el dato
    I2C0_MCS_R = (I2C_MCS_STOP | I2C_MCS_RUN);  // Condición de parada
    for(i=0;i<150;i++){}
    esperar();

}

//*** LECTURA I2C *****

int I2C_Read(uint8_t device_address, uint8_t register_address)
{

    while(I2C0_MCS_R&0x00000001){};

    I2C0_MSA_R = (device_address << 1) & 0xFE;
    I2C0_MDR_R = register_address;
    I2C0_MCS_R = (I2C_MCS_START | I2C_MCS_RUN);
    for(i=0;i<150;i++){}
    esperar();

    //Recibir información

    I2C0_MSA_R=(device_address<<1)&0xFE;
    I2C0_MSA_R|=0x01; //Indico "RECIEVE"
    I2C0_MCS_R=(I2C_MCS_START|I2C_MCS_STOP|I2C_MCS_RUN);
    for(i=0;i<150;i++){} //Delay
    esperar();
    valor = (I2C0_MDR_R&0xFF);

    return valor;
}

//*** UMBRAL I2C ****
void I2C_Umbral_L(uint16_t distancia)
{
    uint16_t data1;
    uint16_t data2;

    data1 = (distancia >> 8) & 0xFF;;
    data2 = distancia & 0xFF;

    I2C_Write(AdreVL5310, AdreUML_H, data1);
    I2C_Write(AdreVL5310, AdreUML_L, data2);


}

void I2C_Umbral_H(uint16_t distancia)
{
    uint8_t dataH;
    uint8_t dataL;

    dataH = (distancia >> 8) & 0xFF;;
    dataL = distancia & 0xFF;

    I2C_Write(AdreVL5310, AdreUMH_H, dataH);
    I2C_Write(AdreVL5310, AdreUMH_L, dataL);


}

// Función de delay simple
int esperar(){
    while(I2C0_MCS_R&0x00000001){}; //Espero a que la transmisión acabe
    if(I2C0_MCS_R&0x00000002==1){ //¿Hubo error?
    error=1;
    return error;
    };
      return 0;

}

//**** RUTINA INTERRUPCION GPIO *****

void GPIOPortA_Handler(void)
{
    interr = I2C_Read(AdreVL5310, 0x13);

    I2C_Write(AdreVL5310, AdreCLEAR, 0x01);
    GPIO_PORTA_AHB_ICR_R  = 0x01;

    contador=contador + 2;

    valor_h = I2C_Read(AdreVL5310, 0x1E);

    valor_l = I2C_Read(AdreVL5310, 0x1F);

    distancia = (valor_h << 8)|(valor_l);

    stop = I2C_Read(AdreVL5310, 0x91);



}
